sudo iwconfig wlan0
sudo iw wlan0 info
sudo iw reg get

# hmm not necessary to join the group because listening with vlc "autojoins" it?
sudo ip addr add 239.0.1.23/32 dev wlan0 autojoin
sudo ip maddr show
dsh -r ssh -c -M -m pi@piwall1.local,pi@piwall2.local,pi@piwall3.local "sudo ip maddr show" 2>/dev/null

# leader
youtube-dl -f 'best[ext=mp4]' -o - https://www.youtube.com/watch\?v\=4aeETEoNfOg | ffmpeg -re -i - -c:v copy -f avi -c:a copy udp://239.0.1.23:1234

# follower
cvlc udp://@239.0.1.23:1234
cvlc video.mp4 "--video-filter=croppadd{cropleft=1000}" --codec avcodec,none



# turn off / on wifi
dsh -r ssh -c -M -m pi@piwall1.local,pi@piwall2.local,pi@piwall3.local "sudo ifconfig wlan0 down" 2>/dev/null
dsh -r ssh -c -M -m pi@piwall1.local,pi@piwall2.local,pi@piwall3.local "sudo ifconfig wlan0 up" 2>/dev/null

Got multicast over ethernet working. Still laggy, but it improves after maybe 30s or so. Cropping vlc on command line isnt working, might not be supported on raspberry pi. Can reproduce locally w/o multicast shit.





ffmpeg -i Khalid\ -\ Talk\ \(Official\ Video\)-hE2Ira-Cwxo.f137.mp4 -i Khalid\ -\ Talk\ \(Official\ Video\)-hE2Ira-Cwxo.f251.webm -c:v copy -c:a aac -f ismv - | cvlc - "--video-filter=croppadd{cropleft=1000}" --codec avcodec,none

youtube-dl https://www.youtube.com/watch\?v\=hE2Ira-Cwxo -f 'bestvideo+bestaudio' -k


# play youtube video cropped all on a single local pi
yt_url="https://www.youtube.com/watch?v=hE2Ira-Cwxo" ; ffmpeg -i <(youtube-dl $yt_url -f 'bestvideo' -o -) -i <(youtube-dl $yt_url -f 'bestaudio' -o -) -c:v copy -c:a aac -f matroska - | cvlc - "--video-filter=croppadd{cropleft=1000}" --codec avcodec,none

# broadcaster (now we need ffmpeg's `-re` flag because the network doesn't provide backpressure like the pipe output did)
yt_url="https://www.youtube.com/watch?v=CcazSboibcA" ; ffmpeg -re -i <(youtube-dl $yt_url -f 'bestvideo[vcodec^=avc1][height<=720]' -o -) -i <(youtube-dl $yt_url -f 'bestaudio' -o -) -c:v copy -c:a aac -f matroska udp://239.0.1.23:1234

# vp9 broadcaster (1080p fast software decode)
yt_url="https://www.youtube.com/watch?v=ucZl6vQ_8Uo" ; ffmpeg -re -i <(youtube-dl $yt_url -f 'bestvideo[vcodec=vp9][height<=1080]' -o -) -i <(youtube-dl $yt_url -f 'bestaudio' -o -) -c:v copy -c:a aac -f matroska udp://239.0.1.23:1234

#mpeg-ts broadcaster? Allows restarting the receiver during the same broadcast, unlike mkv broadcaster. But receiver won't be in sync with sibling receivers after restart
yt_url="https://www.youtube.com/watch?v=CcazSboibcA" ; ffmpeg -re -i <(youtube-dl $yt_url -f 'bestvideo' -o -) -i <(youtube-dl $yt_url -f 'bestaudio' -o -) -c:v copy -c:a mp2 -b:a 192k -f mpegts udp://239.0.1.23:1234

# receiver, for 1920x1080 video (16:9)
# video stutters / choppy in beginning. Adjusting `--network-caching 6000` does not help
cvlc udp://@239.0.1.23:1234 "--video-filter=croppadd{cropright=960,croptop=270,cropbottom=270}" --codec avcodec,none
cvlc udp://@239.0.1.23:1234 "--video-filter=croppadd{cropleft=960,croptop=270,cropbottom=270}" --codec avcodec,none

# python UDP receiver solves lag problem:
python3 receiver.py | cvlc - "--video-filter=croppadd{cropright=960,croptop=270,cropbottom=270}" --codec avcodec,none


# omx:
requires /boot/config.txt:

# left column
    # vlc 1080p
    python3 receiver.py | tee >(cvlc - --mmal-display hdmi-1 "--video-filter=croppadd{cropright=960,croptop=540}" --codec avcodec,none) >(cvlc - --mmal-display hdmi-2 "--video-filter=croppadd{cropright=960,cropbottom=540}" --codec avcodec,none) > /dev/null

    # omx 1080p
    python3 receiver.py | tee >(omxplayer --crop '0,0,960,540' --display 7 --no-keys pipe:0) >(omxplayer --crop '0,540,960,1080' --display 2 --no-keys pipe:0) >/dev/null

    # omx 720p
    python3 receiver.py | tee >(omxplayer --crop '0,0,640,360' -o hdmi0 --display 2 --no-keys --threshold 3 pipe:0) >(omxplayer --crop '0,360,640,720' -o hdmi1 --display 7 --no-keys --threshold 3 pipe:0) >/dev/null

# right column
    # vlc 1080p
    python3 receiver.py | tee >(cvlc - --mmal-display hdmi-1 "--video-filter=croppadd{cropleft=960,croptop=540}" --codec avcodec,none) >(cvlc - --mmal-display hdmi-2 "--video-filter=croppadd{cropleft=960,cropbottom=540}" --codec avcodec,none) > /dev/null

    # omx 1080p
    python3 receiver.py | tee >(omxplayer --crop '960,0,1920,540' --display 7 --no-keys pipe:0) >(omxplayer --crop '960,540,1920,1080' --display 2 --no-keys pipe:0) >/dev/null

    # omx 720p
    python3 receiver.py | tee >(omxplayer --crop '640,360,1280,720' -o hdmi0 --display 2 --no-keys --threshold 3 pipe:0) >(omxplayer --crop '640,0,1280,360' -o hdmi1 --display 7 --no-keys --threshold 3 pipe:0) >/dev/null

# top right:
    # omx 1080p
    python3 receiver.py | omxplayer --crop '960,0,1920,540' -o local --no-keys --threshold 3 pipe:0

    # omx 720p
    python3 receiver.py | omxplayer --crop '640,0,1280,360' -o local --no-keys --threshold 3 pipe:0

# bottom right
    # omx 1080p
    python3 receiver.py | omxplayer --crop '960,540,1920,1080' -o local --no-keys --threshold 3 --no-keys pipe:0

    # omx 720p
    python3 receiver.py | omxplayer --crop '640,360,1280,720' -o local --no-keys --threshold 3 --no-keys pipe:0


# TODO:
investigate omxplayer --live ?? https://github.com/popcornmix/omxplayer/issues/165

* cropping hi res hevc w/ hardware decode is possible, but it's closed source: https://info-beamer.com/blog/dual-display-or-4k-and-hevc-on-the-pi-4

* could this help us crop in VLC? https://github.com/raspberrypi/userland/pull/624 ask 6by9,  jc-kynesim , or dom
