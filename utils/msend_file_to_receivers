#!/usr/bin/env python3
import argparse
import os
import shlex
import sys
import time

# This is necessary for the import below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)

from piwall2.broadcaster.videobroadcaster import VideoBroadcaster
from piwall2.config import Config
from piwall2.cmdrunner import CmdRunner
from piwall2.logger import Logger
from piwall2.receiver.receiver import Receiver

def parseArgs():
    parser = argparse.ArgumentParser(
        description=('Send a file from the broadcaster to every receiver via multicast.'),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('--input-file', dest='input_file', action='store', required = True,
        help='path to input file')
    parser.add_argument('--output-file', dest='output_file', action='store', required = True,
        help='path to output file')
    args = parser.parse_args()
    return args


logger = Logger()
args = parseArgs()
Config.load_config_if_not_loaded()

logger.info("Stopping receiver service on receivers...")
cmd_runner = CmdRunner()
cmd = 'sudo systemctl stop piwall2_receiver.service'
cmd_runner.run_dsh(cmd, include_broadcaster = False)

logger.info("Starting process to receive file on receivers...")
cmd = (f"{root_dir}/bin/receive_and_play_video --command 'set -o pipefail && export SHELLOPTS && " +
    f"mbuffer -q -m {Receiver.VIDEO_PLAYBACK_MBUFFER_SIZE_BYTES}b > {shlex.quote(args.output_file)}'")
receive_file_proc = cmd_runner.run_dsh(cmd, include_broadcaster = False, wait_for_proc = False)

time.sleep(2)

logger.info("Sending file to receivers...")
cmd = (f'{root_dir}/bin/msend_video --end-of-video-magic-bytes {VideoBroadcaster.END_OF_VIDEO_MAGIC_BYTES.decode()} ' +
    f'< {shlex.quote(args.input_file)}')
cmd_runner.run_cmd_with_realtime_output(cmd)

while receive_file_proc.poll() is None:
    time.sleep(0.1)

logger.info("Restarting receiver service on receivers...")
cmd_runner = CmdRunner()
cmd = 'sudo systemctl restart piwall2_receiver.service'
cmd_runner.run_dsh(cmd, include_broadcaster = False)

if receive_file_proc.returncode != 0:
    raise Exception(f"The receive_file process exited non-zero: {receive_file_proc.returncode}.")

logger.info("Done sending file!")
