#!/usr/bin/env python3
import argparse
import csv
import os
import random
import sys
from urllib.parse import urlparse, parse_qs

# This is necessary for the import below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)

from piwall2.broadcaster.playlist import Playlist
from piwall2.config import Config
from piwall2.configloader import ConfigLoader
from piwall2.logger import Logger

def parseArgs():
    parser = argparse.ArgumentParser(
        description=('Takes a file with a list of videos to add to the playlist.'),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('--file', dest='file', action='store',
        help='A csv file consisting of 3 columns: youtube_url, title, and duration (HH:MM:SS, H:MM:SS, MM:SS, or M:SS)')
    parser.add_argument('--shuffle', dest='shuffle', action='store_true',
        help='If set, we will randomize the order in which the list of videos is added to the queue.')
    args = parser.parse_args()
    return args

def yt_url_to_video_id(url):
    """
    Examples:
    - http://youtu.be/SA2iWivDJiE
    - http://www.youtube.com/watch?v=_oPAwA_Udwc&feature=feedu
    - http://www.youtube.com/embed/SA2iWivDJiE
    - http://www.youtube.com/v/SA2iWivDJiE?version=3&amp;hl=en_US
    """
    query = urlparse(url)
    if query.hostname == 'youtu.be':
        return query.path[1:]
    if query.hostname in ('www.youtube.com', 'youtube.com'):
        if query.path == '/watch':
            p = parse_qs(query.query)
            return p['v'][0]
        if query.path[:7] == '/embed/':
            return query.path.split('/')[2]
        if query.path[:3] == '/v/':
            return query.path.split('/')[2]
    # fail?
    return None


args = parseArgs()
Config.load_config_if_not_loaded(should_set_log_level = False)
ConfigLoader(should_set_log_level = False) # load config, e.g. set log level.
playlist = Playlist()
logger = Logger()

rows = []
with open(args.file) as video_csv:
    csv_reader = csv.reader(video_csv)
    for row in csv_reader:
        rows.append(row)

if args.shuffle:
    random.shuffle(rows)

count = 0
for row in rows:
    url, title, duration = row
    video_id = yt_url_to_video_id(url)
    if video_id is None:
        raise Exception(f'Unable to parse video_id from url: {url}.')

    thumbnail = f'https://i.ytimg.com/vi/{video_id}/mqdefault.jpg'
    playlist.enqueue(url, thumbnail, title, duration, '', Playlist.TYPE_VIDEO)
    logger.info(f'Added video: {url}.')
    count += 1

logger.info(f'Finished adding {count} videos')
