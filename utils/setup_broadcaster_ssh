#!/usr/bin/env python3

import argparse
import subprocess
import os
import sys
import shlex

# This is necessary for the import below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)
from piwall2.configloader import ConfigLoader
from piwall2.parallelrunner import ParallelRunner
from piwall2.broadcaster import Broadcaster

def parse_args():
    parser = argparse.ArgumentParser(description="Setup passwordless SSH for piwall2 video broadcaster. " +
        "Run this on the pi that you will be using as the broadcaster.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--receiver-ssh-password', dest='receiver_ssh_password', action='store', required=True,
        help="SSH password for logging into the receiver raspberry pis. If you haven't changed this, it will be 'raspberry'.")
    args = parser.parse_args()
    return args

# generate the SSH key that the broadcaster will use for passwordless SSH
def generate_ssh_key(file):
    print(f"Generating ssh key: {file} ...")

    dirname = os.path.dirname(file)
    output = (subprocess
        .check_output(
            f"mkdir -p {shlex.quote(dirname)}",
            shell = True,
            executable = '/usr/bin/bash',
            stderr = subprocess.STDOUT
        )
    )

    # https://stackoverflow.com/a/43235320/627663
    output = (subprocess
        .check_output(
            f"ssh-keygen -q -t ed25519 -N '' -f {shlex.quote(file)} <<<y >/dev/null 2>&1",
            shell = True,
            executable = '/usr/bin/bash',
            stderr = subprocess.STDOUT
        )
    )

def authorize_ssh_key(file, password):
    print("Getting list of receivers from config...")
    receivers = ParallelRunner().quote_machines(ConfigLoader().get_receivers())
    authorize_ssh_key_cmd = (
        f"sshpass -p {shlex.quote(password)} " +
        "ssh-copy-id " +
        "-o ConnectTimeout=5 " +
        "-o UserKnownHostsFile=/dev/null " +
        "-o StrictHostKeyChecking=no " +
        "-o LogLevel=ERROR " +
        f"-i {shlex.quote(file)} " + "pi@{}"
    )

    print(f"Authorizing ssh key on receivers: {receivers}")

    parallel_cmd = (
        f"parallel --will-cite --max-procs 16 " +
        # exit when the first job fails. Kill running jobs.
        # If fail=1 is used, the exit status will be the exit status of the failing job.
        "--halt now,fail=1 " +
        f'"{authorize_ssh_key_cmd}" ::: {receivers}'
    )
    output = (subprocess
        .check_output(
            parallel_cmd,
            shell = True,
            executable = '/usr/bin/bash',
            stderr = subprocess.STDOUT
        )
    )


args = parse_args()
generate_ssh_key(Broadcaster.SSH_KEY_PATH)
authorize_ssh_key(Broadcaster.SSH_KEY_PATH, args.receiver_ssh_password)
print("Success!")
