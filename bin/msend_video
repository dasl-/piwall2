#!/usr/bin/env python3

import sys
import argparse
import os
import time

# This is necessary for the imports below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)
from piwall2.config import Config
from piwall2.controlmessagehelper import ControlMessageHelper
from piwall2.logger import Logger
from piwall2.multicasthelper import MulticastHelper

def parseArgs():
    parser = argparse.ArgumentParser(description='piwall2 video sender')
    parser.add_argument('--log-uuid', dest='log_uuid', action='store',
        help='Logger UUID')
    parser.add_argument('--end-of-video-magic-bytes', dest='end_of_video_magic_bytes', action='store',
        help='Bytes to send after sending the video data is done.')
    args = parser.parse_args()
    return args


args = parseArgs()
Config.load_config_if_not_loaded()
log_level = Logger.get_level()
if log_level is None or log_level <= Logger.DEBUG:
    # Prevent MulticastHelper.__send_video_stream_msg debug logs from being too spammy
    Logger.set_level(Logger.INFO)
if args.log_uuid:
    Logger.set_uuid(args.log_uuid)

logger = Logger().set_namespace(os.path.basename(__file__))
logger.info("Starting to send video...")

multicast_helper = MulticastHelper().setup_broadcaster_socket()
control_message_helper = ControlMessageHelper().setup_for_broadcaster()
bytes_sent = 0
first_byte_send_time = None
last_byte_send_time = None
end_loading_screen_signal_time = None
play_signal_time = None
chunk_size = 4096
while True:
    data = sys.stdin.buffer.read(chunk_size)
    if not data and end_loading_screen_signal_time and play_signal_time:
        # Need to make sure we've sent all these signals before breaking
        # Once data returns falsey, it should continue to be falsey forever.
        break

    if bytes_sent <= 0:
        first_byte_send_time = time.time()

    # give enough time for video decoding to occur after sending the first byte of the video
    # before ending the loading screen
    if not end_loading_screen_signal_time and (time.time() - first_byte_send_time) > 1.3:
        control_message_helper.send_msg(ControlMessageHelper.TYPE_END_LOADING_SCREEN, {})
        end_loading_screen_signal_time = time.time()

    # give enough time for the loading screen omxplayer instance to shutdown before starting
    # playback / unpausing the main video instance of omxplayer
    if not play_signal_time and end_loading_screen_signal_time and (time.time() - end_loading_screen_signal_time) > 0.2:
        control_message_helper.send_msg(ControlMessageHelper.TYPE_PLAY_VIDEO, {})
        play_signal_time = time.time()

    if data:
        bytes_sent += multicast_helper.send(data, MulticastHelper.VIDEO_PORT)
        # Rate limit to sending 5 MB/s
        time.sleep(1 / (5 * 1024 * 1024 / chunk_size))
    else:
        # We've sent all our data and we're just waiting for the signals to be sent. Avoid exhausting CPU.
        if not last_byte_send_time:
            last_byte_send_time = time.time()
        time.sleep(0.01)

if args.end_of_video_magic_bytes:
    bytes_sent += multicast_helper.send(args.end_of_video_magic_bytes.encode(), MulticastHelper.VIDEO_PORT)

if not last_byte_send_time:
    last_byte_send_time = time.time()

logger.info(f"Finished sending video. Sent {bytes_sent} bytes in " +
    f"{round(last_byte_send_time - first_byte_send_time, 2)} s " +
    f"({round((bytes_sent / 1024) / (last_byte_send_time - first_byte_send_time), 2)} KB/s).")
