#!/usr/bin/env python3

import sys
import argparse
import os
import time

# This is necessary for the imports below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)
from piwall2.controlmessagehelper import ControlMessageHelper
from piwall2.logger import Logger
from piwall2.multicasthelper import MulticastHelper

def parseArgs():
    parser = argparse.ArgumentParser(description='piwall2 video sender')
    parser.add_argument('--log-uuid', dest='log_uuid', action='store',
        help='Logger UUID')
    parser.add_argument('--end-of-video-magic-bytes', dest='end_of_video_magic_bytes', action='store',
        help='Bytes to send after sending the video data is done.')
    args = parser.parse_args()
    return args


args = parseArgs()
log_level = Logger.get_level()
if log_level is None or log_level <= Logger.DEBUG:
    # Prevent MulticastHelper.__send_video_stream_msg debug logs from being too spammy
    Logger.set_level(Logger.INFO)
if args.log_uuid:
    Logger.set_uuid(args.log_uuid)

logger = Logger().set_namespace(os.path.basename(__file__))
logger.info("Starting to send video...")

multicast_helper = MulticastHelper().setup_broadcaster_socket()
control_message_helper = ControlMessageHelper().setup_for_broadcaster()
bytes_sent = 0
while True:
    data = sys.stdin.buffer.read(4096)
    if not data:
        break

    if bytes_sent <= 0:
        control_message_helper.send_msg(ControlMessageHelper.TYPE_END_LOADING_SCREEN, {})
        time.sleep(0.5) # give time for the loading screen to end

    bytes_sent += multicast_helper.send(data, MulticastHelper.VIDEO_PORT)

if args.end_of_video_magic_bytes:
    bytes_sent += multicast_helper.send(args.end_of_video_magic_bytes.encode(), MulticastHelper.VIDEO_PORT)

logger.info(f"Finished sending video. Sent {bytes_sent} bytes.")
