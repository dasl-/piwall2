#!/usr/bin/env python3

import sys
import argparse
import time

from piwall2.logger import Logger
from piwall2.multicasthelper import MulticastHelper
from piwall2.videobroadcaster import VideoBroadcaster

def parseArgs():
    parser = argparse.ArgumentParser(description='piwall2 video sender')
    parser.add_argument('--duration', dest='duration', action='store', required=True, type=int,
        help='video duration in seconds.')
    parser.add_argument('--size', dest='size', action='store', required=True, type=int,
        help='video size in bytes.')

    args = parser.parse_args()
    return args

def send_data(multicast_helper, data):
    i = 0
    while True:
        chunk = data[i:(i + 1472)]
        i += 1472
        if chunk:
            multicast_helper.send(chunk, MulticastHelper.MSG_TYPE_VIDEO_STREAM)
        else:
            return len(data)


args = parseArgs()
target_byte_rate = args.size / args.duration

log_level = Logger.get_level()
if log_level is None or log_level <= Logger.DEBUG:
    # Prevent MulticastHelper.__send_video_stream_msg debug logs from being too spammy
    Logger.set_level(Logger.INFO)    

m = MulticastHelper().setup_broadcaster_socket()
bytes_sent = 0
bytes_sent_since_burst = 0
time_since_burst = 0
burst_end_time = 0
while True:
    data = sys.stdin.buffer.read(4096)
    if not data:
        break

    if bytes_sent > (VideoBroadcaster.RECEIVER_MBUFFER_SIZE / 2): # slow down after sending this much
        if burst_end_time == 0:
            burst_end_time = time.time()
        time_since_burst = time.time() - burst_end_time
        byte_rate = bytes_sent_since_burst / time_since_burst
        while byte_rate > target_byte_rate:
            time.sleep(0.5)
            time_since_burst = time.time() - burst_end_time
            byte_rate = bytes_sent_since_burst / time_since_burst
        this_bytes_sent = send_data(m, data)
        bytes_sent += this_bytes_sent
        bytes_sent_since_burst += this_bytes_sent
    else: # burst
        bytes_sent += send_data(m, data)

